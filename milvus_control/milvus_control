#!/bin/bash

# obtain the script installed path.
SCRIPT_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Start Milvus server
if [[ -z "${MILVUS_DEV_PATH}" ]]; then
    echo "MILVUS_DEV_PATH is not set or is empty"
    exit 1
fi
echo "MILVUS_DEV_PATH: ${MILVUS_DEV_PATH}"

if [[ -z "${MILVUS_VOLUME_DIRECTORY}" ]]; then
    echo "MILVUS_VOLUME_DIRECTORY is not set or is empty"
    exit 1
fi
echo "MILVUS_VOLUME_DIRECTORY: ${MILVUS_VOLUME_DIRECTORY}"

# Function to display usage
usage() {
    echo "Usage: $0 [-f -a -c -s -k -r] [start_milvus|start_milvus_inf|stop_milvus|stop_milvus_inf]"
    exit 1
}

while getopts fcsakr arg; do
    case $arg in
    f)
        FORCED=1
        ;;
    c)
        CLUSTER=1
        ;;
    s)
        STREAMING=1
        ;;
    a)
        ASAN_ENABLED=1
        ;;
    k)
        USE_KAFKA=1
        ;;
    r)
        USE_RMQ=1
        ;;
    *)
        usage
        # Handle unrecognized flags here
        ;;
    esac
done

shift $(($OPTIND - 1))

function generate_new_volume_directory() {
    if [[ -z "${WORKSPACE_TAG}" ]]; then
        WORKSPACE_TAG=$(date +%F-%H-%M-%S)
        echo "WORKSPACE_TAG is not set, use current time as tag: ${WORKSPACE_TAG}"
    fi
    NEW_VOLUME_DIRECTORY="${MILVUS_VOLUME_DIRECTORY}/${WORKSPACE_TAG}"
    mkdir -p "${NEW_VOLUME_DIRECTORY}" || exit 1
    echo "NEW_VOLUME_DIRECTORY: ${NEW_VOLUME_DIRECTORY}"
}

function start_milvus_inf() {
    if [[ -z "${NEW_VOLUME_DIRECTORY}" ]]; then
        generate_new_volume_directory
    fi
    DOCKER_COMPOSE_FILE="docker-compose-pulsar.yml"
    if [[ "${USE_KAFKA}" ]]; then
        echo "Use Kafka..."
        DOCKER_COMPOSE_FILE="docker-compose-kafka.yml"
    fi
    if [[ -n "${USE_RMQ}" ]]; then
        echo "Use RMQ..."
        DOCKER_COMPOSE_FILE="docker-compose-rmq.yml"
    fi
    pushd "$SCRIPT_PATH" || exit 1
    MILVUS_INF_VOLUME_DIRECTORY="${NEW_VOLUME_DIRECTORY}/docker-volumes/" docker compose -f "${DOCKER_COMPOSE_FILE}" up -d
    popd || exit 1
}

function stop_milvus_inf() {
    pushd "$SCRIPT_PATH" || exit 1
    DOCKER_COMPOSE_FILE="docker-compose-pulsar.yml"
    if [[ "${USE_KAFKA}" ]]; then
        echo "Use Kafka..."
        DOCKER_COMPOSE_FILE="docker-compose-kafka.yml"
    fi
    if [[ "${USE_RMQ}" ]]; then
        echo "Use RMQ..."
        DOCKER_COMPOSE_FILE="docker-compose-rmq.yml"
    fi
    docker compose -f "${DOCKER_COMPOSE_FILE}" down
    popd || exit 1
}

function start_milvus() {
    if [[ -z "${NEW_VOLUME_DIRECTORY}" ]]; then
        generate_new_volume_directory
    fi
    LOG_PATH="${NEW_VOLUME_DIRECTORY}/milvus-logs/"
    mkdir -p "${LOG_PATH}" || exit 1

    pushd "$MILVUS_DEV_PATH" || exit 1
    source "./scripts/setenv.sh"
    # export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:./lib"
    # export RPATH="$LD_LIBRARY_PATH"

    export LOG_LEVEL=debug

    if [[ -n "${ASAN_ENABLED}" ]]; then
        echo "Use ASAN, disable jemalloc..."
        export LD_PRELOAD=""
    fi

    if [[ -n "${STREAMING}" ]]; then
        echo "Use streaming service..."
        export MILVUS_STREAMING_SERVICE_ENABLED=1
    fi

    export MQ_TYPE="pulsar"
    if [[ "${USE_KAFKA}" ]]; then
        echo "Use Kafka..."
        export MQ_TYPE="kafka"
    elif [[ -n "${USE_RMQ}" ]]; then
        echo "Use RMQ..."
        export MQ_TYPE="rocksmq"
        export ROCKSMQ_PATH="${NEW_VOLUME_DIRECTORY}/rocksmq/rdb_data"
    fi

    if [[ -z "${CLUSTER}" ]]; then
        echo "Starting milvus standalone... Log@ ${LOG_PATH}"
        METRICS_PORT=19091 ./bin/milvus run standalone 1>"${LOG_PATH}/standalone.stdout.log" 2>"${LOG_PATH}/standalone.stderr.log" &
    else
        echo "Starting milvus cluster... Log@ ${LOG_PATH}"
        if [[ -z "${STREAMING}" ]]; then
            METRICS_PORT=19092 ./bin/milvus run mixture -rootcoord -querycoord -datacoord -indexcoord 1>"${LOG_PATH}/mixcoord.stdout.log" 2>"${LOG_PATH}/mixcoord.stderr.log" &
            METRICS_PORT=19093 ./bin/milvus run proxy 1>"${LOG_PATH}/proxy.stdout.log" 2>"${LOG_PATH}/proxy.stderr.log" &
            METRICS_PORT=19094 LOCALSTORAGE_PATH="${NEW_VOLUME_DIRECTORY}/querynode/data/" ./bin/milvus run querynode 1>"${LOG_PATH}/querynode.stdout.log" 2>"${LOG_PATH}/querynode.stderr.log" &
            METRICS_PORT=19095 ./bin/milvus run datanode 1>"${LOG_PATH}/datanode.stdout.log" 2>"${LOG_PATH}/datanode.stderr.log" &
            METRICS_PORT=19096 ./bin/milvus run indexnode 1>"${LOG_PATH}/indexnode.stdout.log" 2>"${LOG_PATH}/indexnode.stderr.log" &
        else
            METRICS_PORT=19092 ./bin/milvus run mixture -rootcoord -querycoord -datacoord -indexcoord 1>"${LOG_PATH}/mixcoord.stdout.log" 2>"${LOG_PATH}/mixcoord.stderr.log" &
            METRICS_PORT=19093 ./bin/milvus run proxy 1>"${LOG_PATH}/proxy.stdout.log" 2>"${LOG_PATH}/proxy.stderr.log" &
            METRICS_PORT=19094 LOCALSTORAGE_PATH="${NEW_VOLUME_DIRECTORY}/querynode/data/" ./bin/milvus run querynode 1>"${LOG_PATH}/querynode.stdout.log" 2>"${LOG_PATH}/querynode.stderr.log" &
            METRICS_PORT=19095 ./bin/milvus run datanode 1>"${LOG_PATH}/datanode.stdout.log" 2>"${LOG_PATH}/datanode.stderr.log" &
            METRICS_PORT=19096 ./bin/milvus run indexnode 1>"${LOG_PATH}/indexnode.stdout.log" 2>"${LOG_PATH}/indexnode.stderr.log" &
            METRICS_PORT=19097 LOCALSTORAGE_PATH="${NEW_VOLUME_DIRECTORY}/streamingnode/data/" ./bin/milvus run streamingnode 1>"${LOG_PATH}/streamingnode.stdout.log" 2>"${LOG_PATH}/streamingnode.stderr.log" &
        fi
    fi
    popd || exit 1
}

function stop_milvus() {
    if [[ -z "${FORCED}" ]]; then
        echo "Stopping Milvus server..."
        killall milvus
    else
        echo "Force stopping Milvus server..."
        killall -9 milvus
    fi
}

# Handle options
case "$1" in
start_milvus_inf)
    start_milvus_inf
    ;;
stop_milvus_inf)
    stop_milvus_inf
    ;;
start_milvus)
    start_milvus_inf
    start_milvus
    ;;
stop_milvus)
    stop_milvus
    stop_milvus_inf
    ;;
*)
    usage
    ;;
esac

# Check if no option was provided
if [ $# -eq 0 ]; then
    usage
fi
